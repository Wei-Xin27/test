pipeline {
    agent any

    parameters {
        choice(
            name: 'IMAGE_TAG',
            choices: ['frontend-latest', 'backend-latest'],
            description: 'Choose image tag'
        )
        string(
            name: 'TAG_SUFFIX',
            defaultValue: '',
            description: 'Optional suffix to append to the image tag (e.g. "v1", "dev", "1234")'
        )
    }


    environment {
        AWS_REGION = 'ap-southeast-1'
        ECR_REPO_URI = '533267142189.dkr.ecr.ap-southeast-1.amazonaws.com/misa-test'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub
                git branch: 'main', url: 'https://github.com/Wei-Xin27/test.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    
                    def buildDir = ''

                    env.FULL_IMAGE_TAG = params.IMAGE_TAG

                    if (params.TAG_SUFFIX?.trim()) {
                        env.FULL_IMAGE_TAG = "${params.IMAGE_TAG}-${params.TAG_SUFFIX.trim()}"
                    }

                    if (params.IMAGE_TAG == 'frontend-latest') {
                        buildDir = 'frontend'
                    } else if (params.IMAGE_TAG == 'backend-latest') {
                        buildDir = 'backend'
                    } else {
                        error "Unsupported IMAGE_TAG value: ${params.IMAGE_TAG}"
                    }

                    // Build Docker image from the selected subdirectory
                    docker.build("${ECR_REPO_URI}:${env.FULL_IMAGE_TAG}", "${buildDir}")
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                script {

                    
                    // Login to AWS ECR using AWS CLI and docker login
                    sh """
                    aws --region ${AWS_REGION} ecr get-login-password | docker login --username AWS --password-stdin ${ECR_REPO_URI.split('/')[0]}
                    """
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    // Push the image to ECR
                    sh "docker push ${ECR_REPO_URI}:${env.FULL_IMAGE_TAG}"
                }
            }
        }
        stage('Update Kubernetes Manifest') {
            steps {
                script {
                    def manifestFile = ''
                    def newImage = "${ECR_REPO_URI}:${env.FULL_IMAGE_TAG}"

                    if (params.IMAGE_TAG == 'frontend-latest') {
                        manifestFile = './k8s/frontend-deploy.yaml'
                    } else if (params.IMAGE_TAG == 'backend-latest') {
                        manifestFile = './k8s/backend-deploy.yaml'
                    } else {
                        error "No manifest file defined for IMAGE_TAG: ${params.IMAGE_TAG}"
                    }

                    // Replace image in the manifest
                    sh """
                    sed -i 's|image: .*|image: ${newImage}|' ${manifestFile}
                    """
                    echo "Updated image in ${manifestFile} to ${newImage}"
                }
            }
        }


        stage('Commit & Push Changes') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'misaGitHub', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                sh '''
                    git config user.name "Jenkins"
                    git config user.email "jenkins@example.com"
                    git add ./k8s/frontend-deploy.yaml
                    git commit -m "Update frontend image tag to $IMAGE_TAG"
                    git push https://$GIT_USER:$GIT_PASS@github.com/Wei-Xin27/test.git HEAD:main
                '''
                }
            }
        }
    }

    


    
    
    post {
        always {
            cleanWs()
        }
    }
}
